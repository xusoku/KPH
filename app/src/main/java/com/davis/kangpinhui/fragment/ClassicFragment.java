package com.davis.kangpinhui.fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.text.TextUtils;import android.util.ArrayMap;import android.view.View;import android.widget.AdapterView;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.davis.kangpinhui.AppApplication;import com.davis.kangpinhui.Model.Category;import com.davis.kangpinhui.Model.basemodel.BaseModel;import com.davis.kangpinhui.R;import com.davis.kangpinhui.activity.SearchResultActivity;import com.davis.kangpinhui.adapter.ClassicGroupSelectAdapter;import com.davis.kangpinhui.adapter.base.CommonBaseAdapter;import com.davis.kangpinhui.adapter.base.ViewHolder;import com.davis.kangpinhui.api.ApiCallback;import com.davis.kangpinhui.api.ApiInstant;import com.davis.kangpinhui.fragment.base.BaseFragment;import com.davis.kangpinhui.util.CommonManager;import com.davis.kangpinhui.util.ToastUitl;import com.davis.kangpinhui.views.MySwipeRefreshLayout;import com.davis.kangpinhui.views.PinnedHeaderListView;import java.util.ArrayList;import java.util.HashMap;import retrofit2.Call;/** * Created by davis on 16/5/19. */public class ClassicFragment extends BaseFragment {    private ListView listView;    private PinnedHeaderListView pinnedHeaderListView;    private ClassicGroupSelectAdapter classicGroupSelectAdapter;    private MySwipeRefreshLayout classic_swipe;    private LinearLayout classic_rootid_search_linear;    private EditText classic_rootid_et;    private HashMap<String, ArrayList<Category>> map;    private String id="";    @Override    protected void initVariable() {    }    @Override    protected int setContentView() {        return R.layout.fragment_classic;    }    @Override    protected void findViews(View view) {        listView = $(view,R.id.classic_rootid_list);        classic_rootid_search_linear = $(view,R.id.classic_rootid_search_linear);        classic_rootid_et = $(view,R.id.classic_rootid_et);        classic_swipe = $(view,R.id.classic_swipe);        pinnedHeaderListView = $(view,R.id.classic_rootid_pinnlist);        map=new HashMap<>();        classic_swipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                getRightData(id,true);            }        });    }    @Override    protected void onFragmentLoading() {        super.onFragmentLoading();        getLeftData();    }    @Override    protected void initData() {        startFragmentLoading();    }    private void getRightData(final String id,boolean isRefrush) {        this.id=id;        ArrayList<Category> classiclist=map.get(id);        if(!isRefrush&&classiclist!=null&&classiclist.size()>0){            getBindRightView(classiclist,id);            return;        }        CommonManager.setRefreshingState(classic_swipe,true);        Call<BaseModel<ArrayList<Category>>> call = ApiInstant.getInstant().categoryLevel2(AppApplication.apptype,id);        call.enqueue(new ApiCallback<BaseModel<ArrayList<Category>>>() {            @Override            public void onSucssce(BaseModel<ArrayList<Category>> arrayListBaseModel) {                CommonManager.setRefreshingState(classic_swipe,false);                ArrayList<Category> classiclist = arrayListBaseModel.object;                getBindRightView(classiclist,id);            }            @Override            public void onFailure() {                CommonManager.setRefreshingState(classic_swipe,false);            }        });    }    private void getLeftData() {        Call<BaseModel<ArrayList<Category>>> call = ApiInstant.getInstant().categoryLevel1(AppApplication.apptype);        call.enqueue(new ApiCallback<BaseModel<ArrayList<Category>>>() {            @Override            public void onSucssce(BaseModel<ArrayList<Category>> arrayListBaseModel) {                onFragmentLoadingSuccess();                ArrayList<Category> list = arrayListBaseModel.object;                getBindLeftView(list);            }            @Override            public void onFailure()            {                onFragmentLoadingFailed();            }        });    }    private void getBindRightView(final ArrayList<Category> list,String id){        map.put(id,list);        classicGroupSelectAdapter = new ClassicGroupSelectAdapter(mContext, list);        pinnedHeaderListView.setAdapter(classicGroupSelectAdapter);    }    private void getBindLeftView(final ArrayList<Category> list) {        list.get(0).isOnclick = true;        getRightData(list.get(0).id,false);        final CommonBaseAdapter<Category> adapter = new CommonBaseAdapter<Category>(getActivity(), list, R.layout.fragment_classic_left_item) {            @Override            public void convert(ViewHolder holder, Category itemData, int position) {                TextView textView = holder.getView(R.id.classic_rootid_list_item);                textView.setText(itemData.name);                LinearLayout linearLayout = holder.getView(R.id.classic_rootid_list_item_bg);                if (itemData.isOnclick) {                    linearLayout.setVisibility(View.VISIBLE);                    textView.setBackgroundColor(getResources().getColor(R.color.white));                } else {                    linearLayout.setVisibility(View.GONE);                    textView.setBackgroundColor(getResources().getColor(R.color.colorgray));                }            }        };        listView.setAdapter(adapter);        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                for (Category c :list){                    c.isOnclick=false;                }                list.get(position).isOnclick = true;                adapter.notifyDataSetChanged();                getRightData(list.get(position).id,false);            }        });    }    @Override    protected void setListener() {        classic_rootid_search_linear.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {               String str= classic_rootid_et.getText().toString().trim();                if(!TextUtils.isEmpty(str)){                    SearchResultActivity.jumpSearchResultActivity(getActivity(),str,true);                }            }        });    }}